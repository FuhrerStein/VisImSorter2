------------  todo: Generally
switch to pathlib

Stats tool: average HG, average image.

------------  todo: Grouping
figure out what to do if two files have the same name and belong to the same folder

initial grouping is made only using image pairs rather than group pairs
when searching for closest pairs, sort also by other bands, not only by HSV hue

option to group only by pixel count
asynchronous interface: enable to change settings while scanning
scan forders and calculate difference between images in each

rewrite stage2_regroup into using pool in multiprocessing mode
replace re by fnmatch
visualize clustering with animated thumbnails.

migrate to new framework

------------  todo: De-duplication
for fast crop search, use horizontal and vertical 1xH and Wx1 images (or histograms)
separate rough difference (made with HG) and strict difference



clear suggestion options
use Gradients to find best fit
search similar images to sample image or sample folder with images
zooming of previews
panning of previews

button to hide options
(debatable) new comparing method - compare new image to all existing as soon as was added (multiprocessing)
(debatable) start deep compare in parallel right after first valid pair appeared (multiprocessing)
(debatable) adjust best pairs count by image count (debatable - file structure is scanned after count is chosen)

adjust search distance while resorting 

load *ui files directly
animate with https://doc.qt.io/qtforpython-5/overviews/animation-overview.html?highlight=graphics%20framework

when active pair changes from outside thumbs, scroll so that selected thumb is in center
ignore vertical mouse movements over thumbs
fill augmented parts with distinct brush
move view window when resizing thumbs


------------  done:



option to change subfolder naming scheme (add color into the name, number of files)
limit panning
load thumbs in separate thread
resize thumbs
pan in anim mode by hovering (use animation)
use native Qt scenes for faster graphics
stop animation when hiding compare window
if number of pairs reached preset limit then update acceptable min diff
drop worst pairs if number of pairs doubles the set limit
highlight pair when mouse hovering
indicate suggetions in preview when animating
do not show compare window after compare complete
button to show/hide compare window
good frames around previews
free memory when completed
put animation at center in animation mode
zooming and panning in preview area
go to first image when switching filter
show suggestion dimmed after current pair and when pair has marks
disable "apply marked" and "move applied" buttons
button to move to first pair
move "clear marks" to "resort pairs"
delete "size or crop" button
disable non-useful suggestions
switch suggestions when switching filters
filter to show only pairs with suggested favourite
when left time is small, make mix faster
options to autoselect on different criterion
compare using 3D histograms
bigger to right



'''Алгоритм выделения связных компонент

В алгоритме выделения связных компонент задается входной параметр R и в графе удаляются все ребра, для которых
«расстояния» больше R. Соединенными остаются только наиболее близкие пары объектов. Смысл алгоритма заключается в
том, чтобы подобрать такое значение R, лежащее в диапазон всех «расстояний», при котором граф «развалится» на
несколько связных компонент. Полученные компоненты и есть кластеры.

Для подбора параметра R обычно строится гистограмма распределений попарных расстояний. В задачах с хорошо выраженной
кластерной структурой данных на гистограмме будет два пика – один соответствует внутрикластерным расстояниям,
второй – межкластерным расстояния. Параметр R подбирается из зоны минимума между этими пиками. При этом управлять
количеством кластеров при помощи порога расстояния довольно затруднительно.


Алгоритм минимального покрывающего дерева

Алгоритм минимального покрывающего дерева сначала строит на графе минимальное покрывающее дерево,
а затем последовательно удаляет ребра с наибольшим весом.



'''
